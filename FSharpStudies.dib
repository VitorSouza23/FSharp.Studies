#!markdown

String palindrome

#!fsharp

let isPalindorme str = 
    let result = str |> Seq.filter ((<>) ' ') |> Seq.toList
    result = (result |> List.rev)

["abc ba"; "abcba"; "a"; "aaba"; ""]
|> List.map (fun x -> x, isPalindorme x)

#!markdown

Interoperation with .NET libraries

#!fsharp

let (isSuccess1, result1) = Int32.TryParse "123"
printfn "%A %A" isSuccess1 result1

let (isSuccess2, result2) = Int32.TryParse "aaa"
printfn "%A %A" isSuccess2 result2

let (isSuccess3, result3) = DateTime.TryParse "2001-01-01"
printfn "%A %A" isSuccess3 result3

let dictionary = new Collections.Generic.Dictionary<string, string>();
dictionary.Add("a", "b")
let (isSuccess4, result4) = dictionary.TryGetValue "a"
printfn "%A %A" isSuccess4 result4

#!markdown

HTTP requests

#!fsharp

#r "nuget: FSharp.Data, 4.2.8"
open FSharp.Data

let response = Http.RequestString("http://httpbin.org/get",
    query=["test", "foo"], httpMethod="GET")

printf "%A" response

#!markdown

Records

#!fsharp

open System
type MyRecord = { Test1: int; Test2: string; Test3: DateTime}

let test = { Test1 = 1; Test2 = "Test"; Test3 = DateTime.Now }

printfn "%A" test

let test2 = { test with Test1 = 2; }

printfn "%A" test2

#!markdown

Collections

#!fsharp

let array = [|1;2;3|];
printfn "Array: %A" array 

let list = [1;2;3];
printfn "List: %A" list

let map = Map [(1, "a"); (2, "b"); (3, "c")]
printfn "Map: %A" map

let seq = [|1..5|] :> seq<int>
printfn "Seq: %A" seq

let set = Set.empty.Add(1).Add(2).Add(3)
printfn "Set: %A" set

#!markdown

Option/Maybe

#!fsharp

open System
let tryParseInt (input:string) =
    let (success, result) = Int32.TryParse(input)
    if success then Some result else None

let output = tryParseInt "32"
printf "%A" output

#!markdown

Computed Expression

#!fsharp

type LoggingBuilder() =
    let log p = printfn "expresion is %A" p

    member this.Bind(x, f) =
        log x
        f x

    member this.Return(x) = x

let logger = LoggingBuilder()

let loggedWorkflow =
    logger {
        let! x = 42
        let! y = 43
        let! z = x + y
        return z
    }

loggedWorkflow

#!markdown

Disposable

#!fsharp

let makeResource name =
    { new System.IDisposable with
        member this.Dispose() = printfn "%s disposed" name }

let exampleUseBinding name =
    use myResource = makeResource name
    printfn "done"

exampleUseBinding "hello"

let usingResource name callback =
    use myResource = makeResource name
    callback makeResource
    printfn "done"

let callback aReosurce = printfn "Ressource is %A" aReosurce
do usingResource "hello" callback

using (makeResource "hello") callback

#!markdown

Expressions

#!fsharp

let lambda = fun () -> 1

printfn "%A" lambda

let matchSample =
    match 1 with
    | 1 -> "a"
    | _ -> "b"

printfn "%A" matchSample

let ifElse = if true then "a" else "b"

printfn "%A" ifElse

let forLoop =
    for i in [ 1 .. 10 ] do
        printfn "%i" i

forLoop

let tryBlock =
    try
        let result = 1 / 0
        printfn "%i" result
    with
    | e -> printfn "%s" e.Message

tryBlock

let n = 1 in
n + 2 |> ignore

printfn "%A" n

let notEqual = (<>) 1 2
printfn "%A" notEqual

let calculation = (*) ((-) 5 7) ((+) 1 2)
printfn "%A" calculation

#!markdown

LINQ

#!fsharp

let sample = [| 1 .. 100 |]

let primeNumbers =
    query {
        for number in sample do
            where (number % 2 = 0)
            select number
    }

printfn "%A" primeNumbers

#!markdown

MaybeBuilder

#!fsharp

type MaybeBuilder() =
    member this.Bind(x, f) =
        match x with
        | None -> None
        | Some a -> f a

    member this.Return(x) = Some x

let maybe = MaybeBuilder()

let divideBy bottom top =
    if bottom = 0 then
        None
    else
        Some(top / bottom)

let divideByWorkflow init x y z =
    maybe {
        let! a = init |> divideBy x
        let! b = a |> divideBy y
        let! c = b |> divideBy z
        return c
    }

let good = divideByWorkflow 12 3 2 1
let bad = divideByWorkflow 12 3 0 1

printfn "good: %A" good
printfn "bad: %A" bad

#!markdown

Just a Sample

#!fsharp

module Sample1 =
    let sampleFunction x = x * x + 3

    let result = sampleFunction 134
    printfn "Result 1: %d" result

    let sampleFunction2 (x: int) = 2 * x * x - x / 5 + 3

    let result2 = sampleFunction2 (7 + 4)
    printfn $"Result 2: {result2}"

    let sampleFunction3 x =
        if x < 100.0 then
            2.0 * x * x - x / 5.0 + 3.0
        else
            2.0 * x * x + x / 5.0 - 37.0

    let result3 = sampleFunction3 (6.5 + 4.5)
    printfn $"Result 3: %f{result3}"

#!markdown

CPF validator

#!fsharp

open System

let args = "222.222.222-22"

let removeMask (arg: string) = arg.Replace(".", "").Replace("-", "")

let checkSize (arg: string) =
    arg
    |> String.length
    |> function
        | l when l = 11 -> Some(arg)
        | _ -> None

let isValidArgument = removeMask >> checkSize

let firstDigitArray = [| 2 .. 10 |] |> Array.rev
let secondDigitArray = [| 2 .. 11 |] |> Array.rev

let stringToNumbers (arg: string) =
    Array.map (fun c -> Int32.Parse(c.ToString())) (arg.ToCharArray())

let sumOfProducts values numbersValidator =
    Array.map2 (*) values numbersValidator
    |> Array.sum

let mult10 value = value * 10

let rest11 value =
    value % 11 |> fun x -> if x >= 10 then 0 else x

let numberCalculation values numberValidation =
    sumOfProducts values numberValidation
    |> mult10
    |> rest11

let doValidation (cpf: int []) =
    let cpf1 = Array.take 9 cpf
    let cpf2 = Array.take 10 cpf
    let firstDigit = cpf.[9]
    let secondDigit = cpf.[10]

    let resultFirstDigit = numberCalculation cpf1 firstDigitArray
    let resultSecondDigit = numberCalculation cpf2 secondDigitArray

    let isCpfvalid =
        firstDigit = resultFirstDigit
        && secondDigit = resultSecondDigit

    isCpfvalid

let isValid = isValidArgument args

let cleanData = removeMask >> stringToNumbers

let processCpf isValidCpf cpf =
    match isValidCpf with
    | Some v -> doValidation (cleanData cpf)
    | None -> false

printfn "%A" (processCpf isValid args)

#!markdown

Match expressions

#!fsharp

let list1 = [1; 5; 100; 450; 788]

let rec printList listx =
    match listx with
    | head :: tail -> printf "%d " head; printList tail
    | [] -> printfn ""

printList list1

let filter123 x =
    match x with
    | 1 | 2 | 3 -> printfn "Found 1, 2 or 3!"
    | a -> printfn "%d" a

filter123 1
filter123 4

let filterNumber =
    function | 4 | 5 | 6 -> printfn "Found 4, 5 or 6!"
             | a -> printfn "%d" a

filterNumber 4
filterNumber 8

let rangeTest testValue mid size =
    match testValue with
    | var1 when var1 >= mid - size/2 && var1 <= mid + size/2 -> printfn "The test value is in range"
    | _ -> printfn "The test value is out of range"

rangeTest 10 20 5
rangeTest 10 20 5
rangeTest 10 20 40

let detectValue point target =
    match point with
    | (a, b) when a = target && b = target -> printfn "Both values match target %d" target
    | (a, b) when a = target -> printfn "First value matched target in (%d, %d)" target b
    | (a, b) when b = target -> printfn "Second value matched target in (%d, %d)" a target
    | _ -> printfn "Neither value matches target"

detectValue (0, 0) 0
detectValue (1, 0) 0
detectValue (0, 10) 0
detectValue (10, 15) 0

type Union = 
    | A of int
    | B of int

let foo() =
    let test = A 42
    match test with
    | A a
    | B a when a > 41 -> a//the guard applies to both patters
    | _ -> 1

foo()

#!markdown

Tuples inside Lists

#!fsharp

let input = [1, "test"; 2, "sample"]
input

#!markdown

Pipes 

#!fsharp

let sum x y = x + y

1 |> sum <| 2

#!markdown

Array concat

#!fsharp

let arr = [|[|1;2;3|]; [|4;5;6|]|]
let arr1 = arr |> Array.concat

#!markdown

Caesar's cipher

#!fsharp

let mapChar (top: int) (botton: int) (k: int) (c: char) =
    let k2 = (k % 26)
    c 
    |> int
    |> function
        | i when i >= top && i <= botton -> if i + k2 > botton then char ((i + k2) - botton + top - 1) else char (i + k2)
        | _ -> c

let str = "www.abc.xy"
let k = 85
let newSrt = 
    str
    |> Seq.map (fun x -> mapChar (int 'a') (int 'z') k x)
    |> Seq.map (fun x -> mapChar (int 'A') (int 'Z') 3 x)
    |> String.Concat

#!markdown

Generic suffix

#!fsharp

let a: int list = List.empty
let b: int seq = Seq.empty
let c: int option = Some 1
let d: int[] = Array.empty

let concatLists (x: 'a list) (y: 'a list) = 
    List.concat [x; y]

let e = [1..5]
let f = [6..10]

let g = concatLists e f
