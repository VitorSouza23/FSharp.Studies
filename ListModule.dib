#!markdown

List Module

#!fsharp

//allPairs
let people  = ["Kirk"; "Spock"; "McCoy"]
let numbers = [1; 2]

people |> List.allPairs numbers

#!fsharp

//append

List.append [1..3] [4..7]
[4..7] |> List.append [1..3]

#!fsharp

//average
[1.0 .. 9.0] |> List.average

#!fsharp

//averageBy

type People = { Name: string; Age: int}

let getAgeAsFloat person = float person.Age

let people =
    [
        { Name = "Kirk"; Age = 26 }
        { Name = "Spock"; Age = 90 }
        { Name = "MacCoy"; Age = 37 }
    ]

people |> List.averageBy getAgeAsFloat

#!fsharp

//choose

let input1 = [Some 1; None; Some 3; None]
input1 |> List.choose id

#!fsharp

//chunkBySize

[ 1..10 ] |> List.chunkBySize 3
[ 1..5 ] |> List.chunkBySize 10

#!fsharp

//collect

[ 1..4 ] |> List.collect (fun x -> [1..x])

#!fsharp

//compareWith

let closerToNexDozen a b = 
    (a % 12).CompareTo(b % 12)

let input1 = [1; 11]
let input2 = [1; 13]

(input1, input2) ||> List.compareWith closerToNexDozen

#!fsharp

//concat

let input = [   [1; 2]
                [3; 4;5]
                [6; 7; 8; 9] ]

input |> List.concat

#!fsharp

//contais

[1..9] |> List.contains 3

#!fsharp

//countBy

let input = ['H'; 'a'; 'p'; 'p'; 'y']

input |> List.countBy id

#!fsharp

//distinct

let input = [6;1;2;3;1;4;5;5]
input |> List.distinct

#!fsharp

//distinctBy
let isEven x = 0 = x % 2

let input = [6;1;2;3;1;4;5;5]

input |> List.distinctBy isEven

#!fsharp

//empty

let input = List.empty

#!fsharp

//exactlyOne

["the chosen one"] |> List.exactlyOne

#!fsharp

//except

let input = [1, "Kirk"; 2, "Spock"; 3, "Kenobi"]

input |> List.except [3, "Kenobi"]

#!fsharp

//exists

let input = [1, "Kirk"; 2, "Spock"; 3, "Kenobi"]

input |> List.exists (fun x -> x = (3, "Kenobi"))
input |> List.exists (fun (n, name) -> n > 2)

#!fsharp

//exists2
let anEvenSum a b = 0 = (a + b) % 2

([1..4], [2..5])
||> List.exists2 anEvenSum

#!fsharp

//filter
let isEven x = 0 = x % 2
let input = [1, "Luck"; 2, "Kirk"; 3, "Kenobi"; 4, "Spock"]
let isCommingFromStarTrek (x,_) = isEven x

input |> List.filter isCommingFromStarTrek

#!fsharp

//find

let isEven x = 0 = x % 2
let isGraterThan x y = x > y

let input = [1, "Luke"; 2, "Kirk"; 3, "Spock"; 4, "Kenobi"]

input |> List.find (fun (x, _) -> isEven x) 
input |> List.find (fun (x, _) -> x |> isGraterThan 6)

#!fsharp

//findBack

let isEven x = 0 = x % 2
let isGraterThan x y = x > y

let input = [1, "Luke"; 2, "Kirk"; 3, "Spock"; 4, "Kenobi"]

input |> List.findBack (fun (x, _) -> isEven x) 
input |> List.findBack (fun (x, _) -> x |> isGraterThan 6)

#!fsharp

//findIndex

let isEven x = 0 = x % 2
let isGraterThan x y = x > y

let input = [1, "Luke"; 2, "Kirk"; 3, "Spock"; 4, "Kenobi"]

input |> List.findIndex (fun (x, _) -> isEven x) 
input |> List.findIndex (fun (x, _) -> x |> isGraterThan 6)

#!fsharp

//findIndexBack

let isEven x = 0 = x % 2
let isGraterThan x y = x > y

let input = [1, "Luke"; 2, "Kirk"; 3, "Spock"; 4, "Kenobi"]

input |> List.findIndexBack (fun (x, _) -> isEven x) 
input |> List.findIndexBack (fun (x, _) -> x |> isGraterThan 6)

#!fsharp

//fold

type Fruit = Apple | Pear | Orange

type BagItem = {fruit: Fruit; quantity: int}

let takeMore (previous: BagItem list) fruit = 
    let toTakeThisTime =
        match previous with
        | bagItem :: otherBagItems -> bagItem.quantity + 1
        | [] -> 1
    {fruit = fruit; quantity = toTakeThisTime} :: previous

let inputs = [Apple; Pear; Orange]
([], inputs) ||> List.fold takeMore

#!fsharp

//fold2

type CoinToss = Head | Tails

let inputs1 = [Tails; Head; Tails]
let inputs2 = [Tails; Head; Head]

(0, inputs1, inputs2) |||> List.fold2 (fun acc input1 input2 -> 
    match (input1, input2) with
    | Head, Head -> acc + 1
    | Tails, Tails -> acc + 1
    | _ -> acc - 1)

#!fsharp

//foldBack

([1..5], 0) ||> List.foldBack (fun v acc -> acc + v * v)

#!fsharp

//foldBack2

type Count =
    {
        Positive: int
        Negative: int
        Text: string
    }

let inputs1 = [-1; -2; -3]
let inputs2 = [3; 2; 1]

let initialState = {Positive = 0; Negative = 0; Text = ""}

(inputs1, inputs2, initialState) |||> List.foldBack2 (fun a b acc -> 
    let text = $"{acc.Text}({string a},{string b}) "
    if a + b >= 0 then
        {
            acc with
                Positive = acc.Positive + 1
                Text = text
        }
    else
        {
            acc with
                Negative = acc.Negative + 1
                Text = text
        }
)
